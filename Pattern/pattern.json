{
  "patterns": [
    {
      "name": "Anti-Corruption Layer",
      "description": "Implement a fa√ßade or adapter layer between different subsystems that don't share the same semantics. This layer translates requests that one subsystem makes to the other subsystem. Use this pattern to ensure that an application's design is not limited by dependencies on outside subsystems.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Isolation" },
        { "tagName": "Nature", "tagValue": "Distributed" },
        { "tagName": "Isolation Flow", "tagValue": "Outbound" }
      ]
    },
    {
      "name": "Choreography",
      "description": "Have each component of the system participate in the decision-making process about the workflow of a business transaction, instead of relying on a central point of control.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/choreography",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Communication" },
        { "tagName": "Nature", "tagValue": "Asynchronous" }
      ]
    },
    {
      "name": "Command-Query Responsibility Segregation",
      "description": "separates read and update operations for a data store. Implementing CQRS in your application can maximize its performance, scalability, and security. The flexibility created by migrating to CQRS allows a system to better evolve over time and prevents update commands from causing merge conflicts at the domain level.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications and Databases" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Query" },
        { "tagName": "Nature", "tagValue": "Asynchronous" }
      ]
    },
    {
      "name": "Decompose by Subdomain",
      "description": "Each microservice must have its own responsibilities, and a poorly-defined decomposition can cause unnecessary coupling. So, define the boundaries of your microservices using DDD's subdomain concept.",
      "url": "https://microservices.io/patterns/decomposition/decompose-by-subdomain.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Category", "tagValue": "Domain Modeling" },
        { "tagName": "Purpose", "tagValue": "Decoupling" }
      ]
    },
    {
      "name": "Event Sourcing",
      "description": "Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/event-sourcing",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Decoupling" },
        { "tagName": "Nature", "tagValue": "Event-Driven" },
        { "tagName": "Architectural Style", "tagValue": "Event-Driven Architecture" }
      ]
    },
    {
      "name": "Gatekeeper",
      "description": "The Gatekeeper pattern involves using an intermediary service or component to control and manage access to resources or functionality in a distributed system, enhancing security and enforcing policies.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/gatekeeper",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Cross-Cutting Concerns" },
        { "tagName": "Purpose", "tagValue": "Security" }
      ]
    },
    {
      "name": "Gateway Aggregation",
      "description": "The Gateway Aggregation pattern involves consolidating multiple requests from clients into a single request to reduce network overhead and improve efficiency in a microservices architecture.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications and Databases" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Query" },
        { "tagName": "Nature", "tagValue": "Distributed" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" }
      ]
    },
    {
      "name": "Gateway Routing",
      "description": "The Gateway Routing pattern is a design approach where a centralized gateway service directs client requests to appropriate microservices based on predefined routing rules, facilitating dynamic and efficient traffic management in a distributed system.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/gateway-routing",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Isolation" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Isolation Flow", "tagValue": "Inbound"}
      ]
    },
    {
      "name": "Messaging",
      "description": "The Messaging pattern involves communication between software components through messages, enhancing decoupling, scalability, and flexibility in distributed systems.",
      "url": "https://microservices.io/patterns/communication-style/messaging.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Nature", "tagValue": "Asynchronous" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Communication" },
        { "tagName": "Architectural Style", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Queue-based Load Levelling",
      "description": "The Queue-based Load Levelling pattern involves using queues to distribute processing tasks evenly across multiple consumers, optimizing resource utilization and improving system stability in a distributed environment",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Infrastructure" },
        { "tagName": "Purpose", "tagValue": "Scalability" }
      ]
    },
    {
      "name": "Database per Service",
      "description": "",
      "url": "https://microservices.io/patterns/data/database-per-service.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications and Databases" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Isolation" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Server Side Discovery",
      "description": "The Server-Side Discovery pattern involves a central service registry where servers register their availability, facilitating dynamic and efficient client-server communication in a distributed system.",
      "url": "https://microservices.io/patterns/server-side-discovery.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Flexibility" },
        { "tagName": "Architectural Style", "tagValue": "Microservices" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Sidecar",
      "description": "The Sidecar pattern involves deploying a helper service alongside a microservice to provide features such as monitoring, logging, or security. The sidecar abstracts functionality that would otherwise be duplicated across services.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/sidecar",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Cross-Cutting Concerns" },
        { "tagName": "Purpose", "tagValue": "Don't Repeat Yourself (DRY)" },
        { "tagName": "Architectural Style", "tagValue": "Distributed" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Bulkhead",
      "description": "Isolate critical resources to prevent a cascading failure. This pattern allows you to partition services or operations into smaller groups, ensuring that a failure in one partition does not affect others.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/bulkhead",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Infrastructure" },
        { "tagName": "Purpose", "tagValue": "Resiliency" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Retry",
      "description": "The Retry pattern implements automatic retries for transient failures in distributed systems, improving reliability and reducing downtime.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/retry",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Resiliency" },
        { "tagName": "Nature", "tagValue": "Distributed" },
        { "tagName": "Strategy on Failure", "tagValue": "Reattempt" }
      ]
    },
    {
      "name": "Circuit Breaker",
      "description": "The Circuit Breaker pattern prevents a system from repeatedly trying to execute a failing operation. It acts as a safeguard, improving stability and resiliency.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Resiliency" },
        { "tagName": "Nature", "tagValue": "Distributed" },
        { "tagName": "Strategy on Failure", "tagValue": "Protect" }
      ]
    },
    {
      "name": "Sharding",
      "description": "The Sharding pattern splits a database into smaller, faster, and more easily managed parts called shards to enhance scalability.",
      "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/sharding",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Scalability" }
      ]
    },
    {
      "name": "Service Mesh",
      "description": "A Service Mesh pattern manages service-to-service communication, adding features like service discovery, load balancing, and observability.",
      "url": "https://microservices.io/patterns/deployment/service-mesh.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Infrastructure" },
        { "tagName": "Purpose", "tagValue": "Communication" },
        { "tagName": "Architectural Style", "tagValue": "Distributed" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Saga",
      "description": "The Saga pattern ensures consistency in distributed transactions by breaking them into smaller, independent steps with compensation logic.",
      "url": "https://microservices.io/patterns/data/saga.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications and Databases" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Data Consistency" },
        { "tagName": "Nature", "tagValue": "Asynchronous" },
        { "tagName": "Architectural Style", "tagValue": "Event-Driven Architecture" }
      ]
    },
    {
      "name": "Publish-Subscribe",
      "description": "In the Publish-Subscribe pattern, messages are sent to a topic and distributed to all subscribers, decoupling publishers and subscribers.",
      "url": "https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications" },
        { "tagName": "Category", "tagValue": "Systems Integration" },
        { "tagName": "Purpose", "tagValue": "Communication" },
        { "tagName": "Nature", "tagValue": "Asynchronous" }
      ]
    },
    {
      "name": "Aggregator",
      "description": "Gathers data from multiple services or sources into a single interface or API.",
      "url": "https://akfpartners.com/growth-blog/microservice-aggregator-pattern",
      "tags": [
        { "tagName": "Extent", "tagValue": "Multiple Applications and Databases" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Query" },
        { "tagName": "Nature", "tagValue": "Distributed" }
      ]
    },
    {
      "name": "Command",
      "description": "Encapsulates a request as an object, allowing for parameterization and queuing of requests.",
      "url": "https://refactoring.guru/design-patterns/command",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Encapsulation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Undoability", "tagValue": "Undoable" }
      ]
    },
    {
      "name": "Decorator",
      "description": "Adds behavior to an object dynamically by wrapping it with another object of the same interface.",
      "url": "https://refactoring.guru/design-patterns/decorator",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Structural" },
        { "tagName": "Purpose", "tagValue": "Encapsulation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Role", "tagValue": "Enhancement" }
      ]
    },
    {
      "name": "Observer",
      "description": "Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.",
      "url": "https://refactoring.guru/design-patterns/observer",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Communication" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Adapter",
      "description": "Acts as a bridge between incompatible interfaces, enabling their interaction.",
      "url": "https://refactoring.guru/design-patterns/adapter",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Structural" },
        { "tagName": "Purpose", "tagValue": "Isolation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Repository",
      "description": "A pattern for accessing data that decouples the domain layer from the data source.",
      "url": "https://martinfowler.com/eaaCatalog/repository.html",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Data Management" },
        { "tagName": "Purpose", "tagValue": "Decoupling" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Factory Method",
      "description": "Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.",
      "url": "https://refactoring.guru/design-patterns/factory-method",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Creational" },
        { "tagName": "Purpose", "tagValue": "Flexibility" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Singleton",
      "description": "Ensures a class has only one instance and provides a global point of access to it.",
      "url": "https://refactoring.guru/design-patterns/singleton",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Creational" },
        { "tagName": "Purpose", "tagValue": "Memory Optimization" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Strategy",
      "description": "Defines a family of algorithms, encapsulates each one, and makes them interchangeable.",
      "url": "https://refactoring.guru/design-patterns/strategy",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Flexibility" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Proxy",
      "description": "Provides a placeholder for another object to control access to it.",
      "url": "https://refactoring.guru/design-patterns/proxy",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Structural" },
        { "tagName": "Purpose", "tagValue": "Encapsulation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Role", "tagValue": "Intermediation" }
      ]
    },
    {
      "name": "Chain of Responsibility",
      "description": "Allows passing requests along a chain of handlers until one of them handles the request.",
      "url": "https://refactoring.guru/design-patterns/chain-of-responsibility",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Encapsulation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Undoability", "tagValue": "Not supported" }
      ]
    },
    {
      "name": "Flyweight",
      "description": "Minimizes memory usage by sharing as much data as possible with other similar objects.",
      "url": "https://refactoring.guru/design-patterns/flyweight",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Structural" },
        { "tagName": "Purpose", "tagValue": "Memory Optimization" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Composite",
      "description": "Composes objects into tree structures to represent part-whole hierarchies.",
      "url": "https://refactoring.guru/design-patterns/composite",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Structural" },
        { "tagName": "Purpose", "tagValue": "Standardization" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Template Method",
      "description": "Defines the skeleton of an algorithm in a method, deferring steps to subclasses.",
      "url": "https://refactoring.guru/design-patterns/template-method",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Code Reuse" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Visitor",
      "description": "Lets you define a new operation without changing the classes of the elements it operates on.",
      "url": "https://refactoring.guru/design-patterns/visitor",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Decoupling" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Role", "tagValue": "Operation Addition" }
      ]
    },
    {
      "name": "Iterator",
      "description": "Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.",
      "url": "https://refactoring.guru/design-patterns/iterator",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Decoupling" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Role", "tagValue": "Traversal" }
      ]
    },
    {
      "name": "Memento",
      "description": "Captures and restores an object's state without violating encapsulation.",
      "url": "https://refactoring.guru/design-patterns/memento",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Isolation" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Abstract Factory",
      "description": "Provides an interface for creating families of related or dependent objects without specifying their concrete classes.",
      "url": "https://refactoring.guru/design-patterns/abstract-factory",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Creational" },
        { "tagName": "Purpose", "tagValue": "Object Consistency" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "Mediator",
      "description": "Encapsulates how a set of objects interact, promoting loose coupling.",
      "url": "https://refactoring.guru/design-patterns/mediator",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Decoupling" },
        { "tagName": "Nature", "tagValue": "Object-oriented" },
        { "tagName": "Role", "tagValue": "Coordination" }
      ]
    },
    {
      "name": "Prototype",
      "description": "Creates new objects by copying an existing object.",
      "url": "https://refactoring.guru/design-patterns/prototype",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Creational" },
        { "tagName": "Purpose", "tagValue": "Code Reuse" },
        { "tagName": "Nature", "tagValue": "Object-oriented" }
      ]
    },
    {
      "name": "State",
      "description": "Allows an object to alter its behavior when its internal state changes.",
      "url": "https://refactoring.guru/design-patterns/state",
      "tags": [
        { "tagName": "Extent", "tagValue": "Single Application" },
        { "tagName": "Category", "tagValue": "Behavioral" },
        { "tagName": "Purpose", "tagValue": "Simplify State Change" }
      ]
    }
  ]
}